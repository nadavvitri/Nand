// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	And (a=instruction[15], b=true, out=Cinstruction);  // type of instructions
	Not (in=Cinstruction, out=Ainstruction);
	
	// Mux choose instructions if this A instruction, else is C instruction and feeds with ALU output
    Mux16 (a=instruction, b=ALUout, sel=Cinstruction, out=Aregin);
	
	And (a=Cinstruction, b=instruction[5], out=Cinsdest1); 
	Or (a=Cinsdest1, b=Ainstruction, out=loadA);
	ARegister (in=Aregin, load=loadA, out=Aregout, out[0..14]=addressM); // A register
	
	And (a=Cinstruction, b=instruction[4], out=loadD);
	DRegister (in=ALUout, load=loadD, out=ALUsrc1);  // D register
	
	And (a=Cinstruction, b=instruction[3], out=writeM);
	
	Mux16 (a=Aregout, b=inM, sel=instruction[12], out=ALUsrc2);
	
	ALU (x=ALUsrc1, y=ALUsrc2, zx=instruction[11], nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7], 
	no=instruction[6], out=ALUout, out=outM, zr=zero, ng=neg);
	
	// calculate the load for PC according to the jump bits and ALU control output's
	And (a=neg, b=instruction[2], out=jlt);  // jump if negetive
	And (a=zero, b=instruction[1], out=jeq);  // jump if zero
	
	Or (a=neg, b=zero, out=zeroOrNeg);  // zero or negetive means out <= 0
	Not (in=zeroOrNeg, out=pos);  // out > 0 
	And (a=pos, b=instruction[0], out=jgt);  // jump if positive
	
	Or (a=jlt, b=jeq, out=temp);
	Or (a=temp, b=jgt, out=jump);  // jump appear (and the bits) and stand in the condition
	And (a=jump, b=Cinstruction, out=PCload);  // jump only if this a C instruction
	Not (in=PCload, out=incflag);  // if no jump then inc to the next instruction
	PC (in=Aregout, load=PCload, inc=incflag, reset=reset, out[0..14]=pc);
}