// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static Array twoToThe;
	static boolean color;
	static Array screen;

    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
		let color = true;
        return;
    }
    

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 0;
		while(i < 8192){
			let screen[i] = false;
			let i = i + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address;
		var int value;
		let address = (32 * y) + (x / 16);
		let value = twoToThe[(x & 15)];
		if (color){
				let screen[address] = screen[address] | value;  
		}
		else{
				let screen[address] = screen[address] & ~value;
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a, b, diff, dx, dy, address, temp;
		let address = 0;
		let a = 0;
		let b = 0;
		let diff = 0;
		// case 1#
		if (y1 = y2){
			if (~(x1 < x2)){
				let temp = x1;
				let x1 = x2;
				let x2 = temp;
			}
			// draw pixel until we have a number that dvide by 16 
			while (~((x1 & 15) = 0) & ~(x1 > x2)){
				do Screen.drawPixel(x1, y1);
				let x1 = x1 + 1;
				}
			let address = (32 * y1) + (x1 / 16);
			while (((x1 & 15) = 0) & ~((x1 + 16) > x2)){
				let screen[address] = color;
				let address = address + 1;
				let x1 = x1 + 16;
			}
			while (~(x1 > x2)){
				do Screen.drawPixel(x1, y1);
				let x1 = x1 + 1;
				}
		}
		// case 2#
		if (x1 = x2){
			if (~(y1 < y2)){
				let temp = y1;
				let y1 = y2;
				let y2 = temp;
			}
			while (~(y1 > y2)){
				do Screen.drawPixel(x1, y1);
				let y1 = y1 + 1;
			}
		}
		let dx = Math.abs(x1 - x2);
		let dy = Math.abs(y1 - y2);
		// case 3#
		if (((x1 > x2) & (y1 > y2)) | ((x1 < x2) & (y1 < y2))){
			if ((x1 > x2) & (y1 > y2)){
				let temp = x1;
				let x1 = x2;
				let x2 = temp;
				let temp = y1;
				let y1 = y2;
				let y2 = temp;
			}
			while (~(a > dx) & ~(b > dy)){
				do Screen.drawPixel((x1 + a), (y1 + b));
				if (diff < 0){
					let a = a + 1;
					let diff = diff + dy;
				}
				else{
					let b = b + 1;
					let diff = diff - dx;
				}
			}
		}
		//case 4# (x1 > x2) & (y1 < y2)
		else{
			if (~((x1 > x2) & (y1 < y2))){
				let temp = x1;
				let x1 = x2;
				let x2 = temp;
				let temp = y1;
				let y1 = y2;
				let y2 = temp;
			}
			while (~(a > dx) & ~(b > dy)){
				do Screen.drawPixel((x1 - a), (y1 + b));
				if (diff < 0){
					let a = a + 1;
					let diff = diff + dy;
				}
				else{
					let b = b + 1;
					let diff = diff - dx;
				}
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		while (~(y1 > y2)){
			do Screen.drawLine(x1,y1,x2,y1);
			let y1 = y1 + 1;
		}	
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy, r2, dy2, sqrt_c;
		if (~(r > 181)){
			let dy = -r;
			let r2 = Math.multiply(r,r);
			while (~(dy > r)){
				let dy2 = Math.multiply(dy,dy);
				let sqrt_c = Math.sqrt((r2 - dy2));
				do Screen.drawLine(x - sqrt_c, (y + dy), x + sqrt_c, (y + dy));
				let dy = dy + 1;
			}
		}
		return;
    }
}
